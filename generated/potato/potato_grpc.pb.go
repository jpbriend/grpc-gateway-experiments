// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: potato/potato.proto

package potato

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PotatoServiceClient is the client API for PotatoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PotatoServiceClient interface {
	AddPotato(ctx context.Context, in *AddPotatoRequest, opts ...grpc.CallOption) (*AddPotatoResponse, error)
	GetPotato(ctx context.Context, in *GetPotatoRequest, opts ...grpc.CallOption) (*GetPotatoResponse, error)
	GetPotatoes(ctx context.Context, in *GetPotatoesRequest, opts ...grpc.CallOption) (*GetPotatoesResponse, error)
	UpdatePotato(ctx context.Context, in *UpdatePotatoRequest, opts ...grpc.CallOption) (*UpdatePotatoResponse, error)
	DeletePotato(ctx context.Context, in *DeletePotatoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type potatoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPotatoServiceClient(cc grpc.ClientConnInterface) PotatoServiceClient {
	return &potatoServiceClient{cc}
}

func (c *potatoServiceClient) AddPotato(ctx context.Context, in *AddPotatoRequest, opts ...grpc.CallOption) (*AddPotatoResponse, error) {
	out := new(AddPotatoResponse)
	err := c.cc.Invoke(ctx, "/example.potato.PotatoService/AddPotato", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *potatoServiceClient) GetPotato(ctx context.Context, in *GetPotatoRequest, opts ...grpc.CallOption) (*GetPotatoResponse, error) {
	out := new(GetPotatoResponse)
	err := c.cc.Invoke(ctx, "/example.potato.PotatoService/GetPotato", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *potatoServiceClient) GetPotatoes(ctx context.Context, in *GetPotatoesRequest, opts ...grpc.CallOption) (*GetPotatoesResponse, error) {
	out := new(GetPotatoesResponse)
	err := c.cc.Invoke(ctx, "/example.potato.PotatoService/GetPotatoes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *potatoServiceClient) UpdatePotato(ctx context.Context, in *UpdatePotatoRequest, opts ...grpc.CallOption) (*UpdatePotatoResponse, error) {
	out := new(UpdatePotatoResponse)
	err := c.cc.Invoke(ctx, "/example.potato.PotatoService/UpdatePotato", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *potatoServiceClient) DeletePotato(ctx context.Context, in *DeletePotatoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/example.potato.PotatoService/DeletePotato", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PotatoServiceServer is the server API for PotatoService service.
// All implementations must embed UnimplementedPotatoServiceServer
// for forward compatibility
type PotatoServiceServer interface {
	AddPotato(context.Context, *AddPotatoRequest) (*AddPotatoResponse, error)
	GetPotato(context.Context, *GetPotatoRequest) (*GetPotatoResponse, error)
	GetPotatoes(context.Context, *GetPotatoesRequest) (*GetPotatoesResponse, error)
	UpdatePotato(context.Context, *UpdatePotatoRequest) (*UpdatePotatoResponse, error)
	DeletePotato(context.Context, *DeletePotatoRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPotatoServiceServer()
}

// UnimplementedPotatoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPotatoServiceServer struct {
}

func (UnimplementedPotatoServiceServer) AddPotato(context.Context, *AddPotatoRequest) (*AddPotatoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPotato not implemented")
}
func (UnimplementedPotatoServiceServer) GetPotato(context.Context, *GetPotatoRequest) (*GetPotatoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPotato not implemented")
}
func (UnimplementedPotatoServiceServer) GetPotatoes(context.Context, *GetPotatoesRequest) (*GetPotatoesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPotatoes not implemented")
}
func (UnimplementedPotatoServiceServer) UpdatePotato(context.Context, *UpdatePotatoRequest) (*UpdatePotatoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePotato not implemented")
}
func (UnimplementedPotatoServiceServer) DeletePotato(context.Context, *DeletePotatoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePotato not implemented")
}
func (UnimplementedPotatoServiceServer) mustEmbedUnimplementedPotatoServiceServer() {}

// UnsafePotatoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PotatoServiceServer will
// result in compilation errors.
type UnsafePotatoServiceServer interface {
	mustEmbedUnimplementedPotatoServiceServer()
}

func RegisterPotatoServiceServer(s grpc.ServiceRegistrar, srv PotatoServiceServer) {
	s.RegisterService(&PotatoService_ServiceDesc, srv)
}

func _PotatoService_AddPotato_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPotatoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PotatoServiceServer).AddPotato(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.potato.PotatoService/AddPotato",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PotatoServiceServer).AddPotato(ctx, req.(*AddPotatoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PotatoService_GetPotato_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPotatoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PotatoServiceServer).GetPotato(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.potato.PotatoService/GetPotato",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PotatoServiceServer).GetPotato(ctx, req.(*GetPotatoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PotatoService_GetPotatoes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPotatoesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PotatoServiceServer).GetPotatoes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.potato.PotatoService/GetPotatoes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PotatoServiceServer).GetPotatoes(ctx, req.(*GetPotatoesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PotatoService_UpdatePotato_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePotatoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PotatoServiceServer).UpdatePotato(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.potato.PotatoService/UpdatePotato",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PotatoServiceServer).UpdatePotato(ctx, req.(*UpdatePotatoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PotatoService_DeletePotato_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePotatoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PotatoServiceServer).DeletePotato(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.potato.PotatoService/DeletePotato",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PotatoServiceServer).DeletePotato(ctx, req.(*DeletePotatoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PotatoService_ServiceDesc is the grpc.ServiceDesc for PotatoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PotatoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.potato.PotatoService",
	HandlerType: (*PotatoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPotato",
			Handler:    _PotatoService_AddPotato_Handler,
		},
		{
			MethodName: "GetPotato",
			Handler:    _PotatoService_GetPotato_Handler,
		},
		{
			MethodName: "GetPotatoes",
			Handler:    _PotatoService_GetPotatoes_Handler,
		},
		{
			MethodName: "UpdatePotato",
			Handler:    _PotatoService_UpdatePotato_Handler,
		},
		{
			MethodName: "DeletePotato",
			Handler:    _PotatoService_DeletePotato_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "potato/potato.proto",
}
